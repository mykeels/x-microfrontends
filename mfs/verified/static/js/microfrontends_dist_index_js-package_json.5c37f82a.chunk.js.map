{"version":3,"file":"static/js/microfrontends_dist_index_js-package_json.5c37f82a.chunk.js","mappings":"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","sources":["../../microfrontends/src/index.ts","../../node_modules/.pnpm/tiny-invariant@1.3.1/node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../../microfrontends/src/common/utils/assert.utils.ts","../../microfrontends/src/common/utils/errors.utils.ts","../../microfrontends/src/common/utils/sleep.utils.ts","../../microfrontends/src/common/utils/route.utils.ts","../../microfrontends/src/common/register/index.ts","../../microfrontends/src/components/ErrorBoundary/index.tsx","../../microfrontends/src/components/Microfrontend/index.tsx","../../microfrontends/src/components/Microfrontend/Microfrontend.service.ts","../../microfrontends/src/components/MicrofrontendSlot/index.tsx","../../microfrontends/src/contexts/index.tsx","../../microfrontends/src/components/MicrofrontendSlot/MicrofrontendSlot.utils.ts","../../microfrontends/src/components/MicrofrontendScreen/index.tsx","../../microfrontends/src/components/MicrofrontendScreen/MicrofrontendScreen.utils.ts"],"sourcesContent":["export * from \"./common\";\nexport * from \"./components\";\nexport * from \"./contexts\";\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import invariant from \"tiny-invariant\";\n\n/**\n * Asserts that the given condition is truthy, otherwise throws an error.\n */\nexport const assert = <TOptional>(\n  condition: TOptional,\n  message: string | (() => string)\n): NonNullable<TOptional> => {\n  invariant(\n    condition,\n    typeof message === \"string\"\n      ? `AssertError: ${message}`\n      : message || `AssertError: condition must be truthy`\n  );\n  const _condition = condition;\n  return _condition;\n};\n","/**\n *\n * Creates an error object with a name and a message.\n */\nexport const makeError = <TName extends string>(\n  name: TName,\n  message: string,\n  cause?: unknown\n) => ({\n  name,\n  message,\n  stack: new Error().stack,\n  cause,\n  toString: () => `${name}: ${message}`,\n});\n\n/**\n * Throws an error with the given name and message.\n */\nexport const throwError = <TName extends string>(\n  name: TName,\n  message: string\n) => {\n  throw makeError(name, message);\n};\n","export const sleep = (ms: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n};\n","import { pathToRegexp } from \"path-to-regexp\";\n\n/**\n * Whether the given route can match the other route\n */\nexport const canMatchRoute = (route1: string, route2: string): boolean => {\n  const route1Regex = pathToRegexp(route1.replace(/\\/\\*+/g, \"/:params*\"), []);\n  const route2Regex = pathToRegexp(route2.replace(/\\/\\*+/g, \"/:params*\"), []);\n  return route1Regex.test(route2) || route2Regex.test(route1);\n};\n\n/**\n * Whether the given permission can match the other permission\n */\nexport const canMatchPermission = (\n  permission1: string,\n  permission2: string\n): boolean => {\n  const route1Regex = pathToRegexp(\n    permission1.replace(/\\/\\*\\*+/g, \"/:params*\").replace(/\\/\\*/g, \"/:params\"),\n    []\n  );\n  const route2Regex = pathToRegexp(\n    permission2.replace(/\\/\\*\\*+/g, \"/:params*\").replace(/\\/\\*/g, \"/:params\"),\n    []\n  );\n  return route1Regex.test(permission2) || route2Regex.test(permission1);\n};\n\n/**\n * Whether the given host can match the other host\n */\nexport const canMatchHost = (hostA?: string, hostB?: string): boolean => {\n  return !hostA || !hostB || hostA === hostB;\n};\n\ntype Permission = `${\"manage\" | \"read-only\"}:${string}`;\n\n/**\n * Whether the given user can match the given permissions\n */\nexport const canMatchPermissions = (\n  user: {\n    permissions: Permission[];\n  },\n  permissions: Permission[]\n): boolean => {\n  return permissions?.every((permission) => {\n    const [action, ...objectPaths] = permission.split(\":\");\n    const objectPath = objectPaths.join(\":\");\n    return user.permissions.some((p) => {\n      const [uAction, ...uObjectPaths] = p.split(\":\");\n      const uObjectPath = uObjectPaths.join(\":\");\n      const objectPathsMatching =\n        uObjectPath === objectPath ||\n        canMatchPermission(uObjectPath, objectPath);\n      const actionsMatching =\n        uAction === action || (action === \"read-only\" && uAction === \"manage\");\n      return objectPathsMatching && actionsMatching;\n    });\n  });\n};\n\nexport const selectProps =\n  <TKeys extends readonly string[]>(keys: TKeys) =>\n  <TObj extends { [key in TKeys[number]]: any }>(\n    obj: TObj\n  ): {\n    [key in TKeys[number]]: TObj extends Record<key, infer TValue>\n      ? TValue\n      : never;\n  } => {\n    return Object.fromEntries(\n      Object.entries(obj).filter(([key]: [any, any]) => keys.includes(key))\n    ) as Record<TKeys[number], any>;\n  };\n","import { assert, sleep } from \"../utils\";\nimport {\n  MicrofrontendController,\n  MountFn,\n  UnmountFn,\n} from \"../../components/Microfrontend/Microfrontend.types\";\n\nconst getWindow = () => {\n  const $window: Partial<Window> & { [key: string]: any } =\n    typeof window === \"undefined\" ? {} : window;\n  return $window;\n};\n\n/**\n *\n * @param {string} scope\n * @param {{ hasZeroInstances: () => boolean }} tracker\n */\nconst unloadMicrofrontendAssets = (\n  scope: string,\n  tracker: { hasZeroInstances: () => boolean }\n) => {\n  const mfName = `mf-${scope.toLocaleLowerCase()}-entry`;\n  const mfScript = document.getElementById(mfName);\n  if (!mfScript) {\n    return;\n  }\n  const src = assert(\n    mfScript.getAttribute(\"src\"),\n    `script #${mfName} must have attr [src]`\n  );\n  const lastSlash = src.lastIndexOf(\"/\");\n  const urlStart = src.slice(0, lastSlash);\n\n  const maxAttempts = 3;\n\n  async function attemptToRemoveAssets(attempt = 0): Promise<Element[]> {\n    const scripts = Array.from(document.querySelectorAll(\"head script\")).filter(\n      (script) => script.getAttribute(\"src\")?.startsWith(urlStart)\n    );\n    const links = Array.from(document.querySelectorAll(\"head link\")).filter(\n      (link) => link.getAttribute(\"href\")?.startsWith(urlStart)\n    );\n\n    if (links.length && tracker.hasZeroInstances()) {\n      console.log(\"Removed assets\", [...scripts, ...links]);\n      scripts.forEach((script) => {\n        script.remove();\n      });\n      links.forEach((link) => {\n        link.remove();\n      });\n      return [...scripts, ...links];\n    } else {\n      return sleep(100).then(() => {\n        if (attempt < maxAttempts) {\n          return attemptToRemoveAssets(attempt + 1);\n        }\n        return [];\n      });\n    }\n  }\n  return sleep(100).then(() => attemptToRemoveAssets());\n};\n\n/**\n * Keeps track of how many running instances of a Microfrontend there are.\n *\n * By tracking, we are able to unload the Microfrontend's assets when there are no more instances running.\n */\nconst instanceTracker = ($ctrl: MicrofrontendController) => {\n  return {\n    increment: () => {\n      $ctrl.instances++;\n    },\n    decrement: () => {\n      if ($ctrl.instances > 0) {\n        $ctrl.instances--;\n      }\n    },\n    hasZeroInstances: () => {\n      const $window = getWindow();\n      const scope = $window.$mfs?.[$ctrl.scope] as {\n        [key: string]: { instances: number };\n      };\n      return (\n        Object.values(\n          assert(scope, `window.$mfs.${$ctrl.scope} must exist`)\n        ).reduce((sum, scope) => sum + scope.instances, 0) === 0\n      );\n    },\n  };\n};\n\n/**\n * The Microfrontend Controller is the engine room for a Microfrontend.\n * It contains the `mount` and `unmount` functions, as well as other variables for managing the microfrontend.\n *\n * Usually, a Microfrontend's controller is located in `window.$mfs[scope][module]`\n *\n * If no controller exists for the scope<>module pair, then a new placeholder controller will be created in the appropriate location\n *\n */\nconst getMicrofrontendController = (\n  scope: string,\n  module: string\n): MicrofrontendController => {\n  if (typeof window === \"undefined\") {\n    console.warn(\n      \"Microfrontend cannot be registered without a global window scope\"\n    );\n    // @ts-ignore\n    return { mount: () => {}, unmount: () => {}, instances: 0 };\n  }\n  const $window = getWindow();\n  $window.$mfs = $window.$mfs || {};\n  $window.$mfs[scope] = $window.$mfs[scope] || {};\n  const $scope = $window.$mfs[scope];\n  if ($scope) {\n    $scope[module] = $scope[module] || {\n      mount: () => {\n        console.warn(`No ${scope} mount fn exists`);\n        return () => {};\n      },\n      unmount: () => console.warn(`No ${scope} unmount fn exists`),\n      instances: 0,\n      scope,\n      module,\n    };\n    return $scope?.[module]!;\n  }\n  console.warn(`No ${scope} scope exists in window.$mfs`);\n  return $scope?.[module]!;\n};\n\n/**\n * Registers a microfrontend's scope and module in the window, returning a controller\n */\nexport const register = (\n  scope: string,\n  module: string,\n  { mount, unmount }: { mount: MountFn; unmount: UnmountFn }\n): MicrofrontendController => {\n  const $ctrl = getMicrofrontendController(scope, module);\n  $ctrl.tracker = $ctrl.tracker || instanceTracker($ctrl);\n  const runUnmountFn = (unmount: () => () => void) => {\n    $ctrl.tracker?.decrement();\n    if ($ctrl.tracker?.hasZeroInstances()) {\n      unloadMicrofrontendAssets(scope, $ctrl.tracker);\n    }\n    return () => {\n      setTimeout(() => {\n        unmount()();\n      });\n    };\n  };\n  const getHTMLElement = (ref: HTMLElement | string) =>\n    ref instanceof HTMLElement ? ref : document.getElementById(ref);\n  $ctrl.mount = (containerRef, props) => {\n    $ctrl.tracker?.increment();\n    const unmount = assert(mount, \"mount fn must exist\")(containerRef, props);\n    const container = getHTMLElement(containerRef);\n    const eventBus = props?.eventBus;\n    eventBus?.emit(\"mf:mount\", {\n      container,\n      scope,\n      module,\n    });\n    return () => {\n      eventBus?.emit(\"mf:unmount\", {\n        container,\n        scope,\n        module,\n      });\n      return runUnmountFn(unmount);\n    };\n  };\n  $ctrl.unmount = (containerRef) => {\n    return runUnmountFn(() =>\n      assert(unmount, \"unmount fn must exist\")(containerRef)\n    );\n  };\n  return $ctrl;\n};\n","import React, { Component } from \"react\";\nimport { MicrofrontendErrorFallback } from \"./ErrorBoundary.types\";\n\ntype ErrorBoundaryState<TError> = {\n  error: TError | null;\n  errorInfo: any;\n};\n\ntype ErrorBoundaryProps<TProps, TError> = {\n  children: React.ReactNode;\n  Fallback: MicrofrontendErrorFallback<TProps, TError>;\n};\n\nexport class ErrorBoundary<\n  TError extends { message: string; cause?: any }\n> extends Component<\n  ErrorBoundaryProps<{}, TError>,\n  ErrorBoundaryState<TError>\n> {\n  constructor(props: ErrorBoundaryProps<{}, TError>) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error: Error & TError, errorInfo: any) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error,\n      errorInfo: errorInfo,\n    });\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo && this.state.error) {\n      const error = this.state.error;\n      const cause = this.state.errorInfo;\n      if (error) {\n        error.cause = cause;\n      }\n      const Fallback = this.props.Fallback;\n      // Error path\n      return typeof Fallback === \"function\" ? (\n        <Fallback error={error} />\n      ) : (\n        Fallback\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","import classNames from \"classnames/dedupe\";\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nimport { makeError, assert } from \"../../common\";\nimport { loadMicrofrontend } from \"./Microfrontend.service\";\nimport { MicrofrontendErrorFallback } from \"../ErrorBoundary/ErrorBoundary.types\";\nimport { MicrofrontendManifest } from \"./Microfrontend.types\";\nimport { ErrorBoundary } from \"../ErrorBoundary\";\n\ntype MicrofrontendProps = {\n  scope: string;\n  module: string;\n  entry: string;\n  manifests: MicrofrontendManifest[];\n  url?: string;\n  id?: string;\n  className?: string | string[] | { [key: string]: boolean };\n  navigate?: (href: string) => any;\n  Loading: React.ComponentType;\n  Fallback: MicrofrontendErrorFallback;\n  loadMicrofrontend?: typeof loadMicrofrontend;\n};\n\nexport const Microfrontend = ({\n  id,\n  scope,\n  entry,\n  module,\n  Loading,\n  Fallback,\n  className,\n  loadMicrofrontend,\n  ...props\n}: MicrofrontendProps) => {\n  const {\n    isFetched: isMounted,\n    isError,\n    error,\n    data: { mount } = {},\n  } = useQuery(`microfrontend?entry=${entry}&module=${module}`, async () => {\n    assert(loadMicrofrontend, \"props.loadMicrofrontend must be a function\");\n    return loadMicrofrontend?.({ entry, scope, module });\n  });\n\n  const mfClassName = classNames(\n    \"microfrontend-container spin-when-empty\",\n    className\n  );\n\n  const containerId = `mount-${(id || scope).toLowerCase()}-container`;\n  const [mfError, setMFError] = useState<{ message: string } | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const ErrorFallback: MicrofrontendErrorFallback = (errorProps) =>\n    typeof Fallback === \"function\" ? (\n      <Fallback\n        {...{\n          containerId,\n          scope,\n          entry,\n          module,\n          ...props,\n        }}\n        {...errorProps}\n        retry={() => setRetryCount(retryCount + 1)}\n      />\n    ) : (\n      Fallback\n    );\n\n  const _ErrorBoundary = ({ children }: { children: React.ReactElement }) => (\n    <ErrorBoundary Fallback={ErrorFallback}>{children}</ErrorBoundary>\n  );\n\n  useEffect(() => {\n    if (!isMounted || isError || typeof mount !== \"function\") {\n      return;\n    }\n    let unmount: (() => void) | null = null;\n    try {\n      unmount = mount(containerId, {\n        ...props,\n        ErrorBoundary: _ErrorBoundary,\n      });\n    } catch (error) {\n      setMFError(\n        makeError(\n          \"MountError\",\n          `Could not mount Microfrontend: ${scope} (${module})`,\n          error\n        )\n      );\n    }\n    return () => {\n      setTimeout(() => {\n        try {\n          if (typeof unmount === \"function\") {\n            console.log(\"unmount\", scope);\n            unmount();\n          }\n        } catch (err) {\n          console.error(err);\n          setMFError(\n            makeError(\n              \"UnmountError\",\n              `Could not unmount Microfrontend: ${scope} (${module})`,\n              error\n            )\n          );\n        }\n      });\n    };\n  }, [isMounted, isError, entry, module, retryCount]);\n\n  return isError ? (\n    <ErrorFallback\n      error={\n        error instanceof Error\n          ? error\n          : makeError(\n              \"UnknownError\",\n              typeof error === \"string\"\n                ? error\n                : `An error occurred in a microfrontend: ${error}`,\n              error\n            )\n      }\n    />\n  ) : mfError ? (\n    <ErrorFallback error={mfError} />\n  ) : !isMounted ? (\n    typeof Loading === \"function\" ? (\n      <Loading />\n    ) : (\n      Loading\n    )\n  ) : (\n    <div\n      id={containerId}\n      className={mfClassName}\n      {...{ \"data-mf-scope\": scope, \"data-mf-module\": module }}\n    ></div>\n  );\n};\n\nMicrofrontend.defaultProps = {\n  loadMicrofrontend,\n};\n\nexport * from \"./Microfrontend.types\";\n","import { assert, sleep } from \"../../common\";\nimport {\n  MicrofrontendManifest,\n  MicrofrontendDefaultExport,\n} from \"./Microfrontend.types\";\n\ndeclare function __webpack_init_sharing__(scope: string): Promise<void>;\ndeclare const __webpack_share_scopes__: { default: any };\n\nexport function loadComponent<TScope extends string>(\n  scope: TScope,\n  module: string\n): () => Promise<MicrofrontendDefaultExport> {\n  return async () => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n    const $window = window as {\n      [key in TScope]: {\n        init: (webpackShareScope: any) => Promise<any>;\n        get: (module: string) => Promise<{ [key: string]: any }>;\n      };\n    };\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__(\"default\");\n\n    const container = $window[scope];\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await Promise.race([\n      container?.get(module),\n      sleep(300).then(() =>\n        Promise.reject(\n          new Error(\n            `No module ${module} was found in window.${scope} container`\n          )\n        )\n      ),\n    ]);\n    const Module =\n      typeof factory === \"function\"\n        ? factory()\n        : Promise.reject(\n            new Error(\n              `No module ${module} was found in window.${scope} container`\n            )\n          );\n    return Module;\n  };\n}\n\nexport const loadScript = (\n  id: string,\n  src: string\n): Promise<HTMLScriptElement> => {\n  return new Promise((resolve, reject) => {\n    if (document.querySelector(`script[id=\"${id}\"]`)) {\n      const script: HTMLScriptElement = assert(\n        document.querySelector(`script[id=\"${id}\"]`),\n        `script must exist: [id=${id}]`\n      );\n      return resolve(script);\n    }\n    const script = document.createElement(\"script\");\n    script.id = id;\n    script.src = src;\n    script.type = \"text/javascript\";\n    script.async = true;\n    script.onload = () => resolve(script);\n    script.onerror = reject;\n    document.head.appendChild(script);\n  });\n};\n\nexport const loadMicrofrontend = async ({\n  entry,\n  scope,\n  module,\n}: Pick<MicrofrontendManifest, \"entry\" | \"scope\" | \"module\">) =>\n  loadScript(`mf-${scope.toLowerCase()}-entry`, entry)\n    .then(() => loadComponent(scope, module)())\n    .then((exported) => exported.default)\n    .then(({ mount, unmount }) => {\n      return {\n        mount,\n        unmount,\n      };\n    })\n    .catch((error: unknown) => Promise.reject(error));\n","import React, { useContext, useId } from \"react\";\nimport { ErrorBoundary } from \"../ErrorBoundary\";\nimport { MicrofrontendContext } from \"../../contexts\";\nimport { Microfrontend } from \"../Microfrontend\";\nimport { getMicrofrontendsByName } from \"./MicrofrontendSlot.utils\";\nimport { MicrofrontendCustomSlotOptions } from \"../Microfrontend/Microfrontend.types\";\n\ntype MicrofrontendSlot = MicrofrontendCustomSlotOptions & {\n  [key: string]: any;\n};\n\ntype MicrofrontendSlotProps = {\n  name: string;\n  transform?: (slots: MicrofrontendSlot[]) => MicrofrontendSlot[];\n  Fallback?: React.ComponentType<{ slot?: MicrofrontendSlot }>;\n  Loading?: React.ComponentType<{ slot?: MicrofrontendSlot }>;\n  className?: string | string[] | { [key: string]: boolean };\n};\n\nexport const MicrofrontendSlot = ({\n  name,\n  transform,\n  Fallback,\n  Loading,\n  className,\n  ...props\n}: MicrofrontendSlotProps) => {\n  const id = useId();\n  const { manifests, user, ...contextProps } = useContext(MicrofrontendContext);\n\n  const slots = getMicrofrontendsByName(manifests, name, {\n    user,\n  });\n\n  const transformedSlots = transform?.(slots) || slots;\n\n  return (\n    <>\n      {transformedSlots.map((slot, index) => (\n        <ErrorBoundary\n          key={`slot-${slot.scope}-${slot.module}-${id}-${index}`}\n          Fallback={\n            typeof Fallback === \"function\"\n              ? (errorProps) => (\n                  <Fallback slot={slot} {...props} {...errorProps} />\n                )\n              : Fallback || (() => <></>)\n          }\n        >\n          <Microfrontend\n            {...{ manifests, user, ...slot, ...contextProps, ...props }}\n            Fallback={\n              typeof Fallback === \"function\"\n                ? (errorProps) => (\n                    <Fallback slot={slot} {...props} {...errorProps} />\n                  )\n                : Fallback || (() => <></>)\n            }\n            Loading={\n              typeof Loading === \"function\"\n                ? () => <Loading slot={slot} />\n                : Loading || (() => <></>)\n            }\n            entry={slot.entry}\n            module={slot.module}\n            scope={slot.scope}\n            className={className}\n            id={`slot-${slot.scope}-${id}-${index}`}\n          />\n        </ErrorBoundary>\n      ))}\n    </>\n  );\n};\n\nMicrofrontendSlot.defaultProps = {\n  transform: (slots) => slots,\n  Fallback: () => <div>Sorry, there was an error loading this component</div>,\n  Loading: () => <div>...loading...</div>,\n} satisfies Partial<MicrofrontendSlotProps>;\n\nexport * from \"./MicrofrontendSlot.utils\";\n","import React from \"react\";\n\nimport { ErrorBoundary, MicrofrontendMountProps } from \"../components\";\n\nconst defaults = {\n  homedir: \"/\",\n\n  url: \"/\",\n\n  navigate: () => {},\n\n  manifests: [],\n\n  fetch: (input: RequestInfo, init?: RequestInit) => window.fetch(input, init),\n\n  user: undefined,\n\n  eventBus: undefined,\n\n  layout: {\n    navItems: [],\n    logout: () => {},\n  },\n\n  ErrorBoundary: ({ children }: { children: React.ReactElement }) => (\n    <ErrorBoundary Fallback={() => <>An Error occurred</>}>\n      {children}\n    </ErrorBoundary>\n  ),\n};\n\nexport const MicrofrontendContext =\n  React.createContext<MicrofrontendMountProps>(defaults);\n","import {\n  assert,\n  canMatchHost,\n  canMatchPermissions,\n  selectProps,\n} from \"../../common\";\nimport {\n  MicrofrontendCustomSlotOptions,\n  MicrofrontendManifest,\n  MicrofrontendPermission,\n} from \"../Microfrontend/Microfrontend.types\";\n\ntype MicrofrontendMatchingName = {\n  module: string;\n  entry: string;\n  scope: string;\n  [key: string]: any;\n};\n\n/**\n *\n * @param manifests\n * @param name\n * @param options\n * @param options.transformPermission Use this to replace keywords in permissions such as :companyAccountId or :userId\n * @returns Slots matching the given name\n */\nexport const getMicrofrontendsByName = (\n  manifests: MicrofrontendManifest[],\n  name: string,\n  options?: {\n    host?: string;\n    user?: { permissions: MicrofrontendPermission[] };\n    transformPermission?: (\n      permission: MicrofrontendPermission\n    ) => MicrofrontendPermission;\n  }\n): MicrofrontendMatchingName[] =>\n  manifests\n    ?.reduce(\n      (arr, manifest) =>\n        [\n          ...arr,\n          ...(manifest.slots[name]?.map((slot) => ({\n            ...selectProps([\"entry\", \"scope\", \"module\", \"auth\"])(manifest),\n            ...(typeof slot === \"string\" ? { slot } : slot),\n          })) || []),\n        ] as MicrofrontendMatchingName[],\n      [] as MicrofrontendMatchingName[]\n    )\n    .filter(({ host: routeHost }: MicrofrontendCustomSlotOptions) =>\n      canMatchHost(routeHost, options?.host)\n    )\n    .filter(\n      ({ auth }: MicrofrontendCustomSlotOptions) =>\n        !auth?.required ||\n        canMatchPermissions(\n          assert(options?.user, \"options.user must exist\"),\n          auth?.permissions?.map((p) =>\n            typeof options?.transformPermission === \"function\"\n              ? options?.transformPermission(p)\n              : p\n          ) || []\n        )\n    );\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useLocation } from \"react-router-dom\";\nimport { makeError } from \"../../common\";\n\nimport { Microfrontend } from \"../Microfrontend\";\nimport { getMicrofrontendsMatchingLocation } from \"./MicrofrontendScreen.utils\";\nimport {\n  MicrofrontendManifest,\n  MicrofrontendMountProps,\n} from \"../Microfrontend/Microfrontend.types\";\nimport { MicrofrontendErrorFallback } from \"../ErrorBoundary/ErrorBoundary.types\";\n\ntype MicrofrontendScreenProps = {\n  host?: string;\n  Loading: React.ComponentType;\n  Fallback: MicrofrontendErrorFallback;\n  Microfrontend: typeof Microfrontend;\n} & Omit<MicrofrontendMountProps, \"manifests\" | \"ErrorBoundary\"> &\n  (\n    | {\n        getMicrofrontendManifests: () => Promise<MicrofrontendManifest[]>;\n      }\n    | {\n        manifests: MicrofrontendManifest[];\n      }\n  );\n\n/**\n * Route-level component, that loads Microfrontends based on\n * whether their manifest routes matches the current location.\n */\nexport const MicrofrontendScreen = ({\n  host,\n  Loading,\n  Fallback,\n  navigate,\n  Microfrontend,\n  ...props\n}: MicrofrontendScreenProps) => {\n  const location = useLocation();\n  const url = location.pathname;\n  const {\n    data: manifests = \"manifests\" in props ? props.manifests : [],\n    isLoading,\n    isError,\n    error,\n  } = useQuery(\n    \"manifests\",\n    () =>\n      \"getMicrofrontendManifests\" in props\n        ? props.getMicrofrontendManifests()\n        : props.manifests,\n    {\n      enabled: \"getMicrofrontendManifests\" in props,\n    }\n  );\n  const [targetMF] =\n    getMicrofrontendsMatchingLocation(manifests || [], url, {\n      host,\n      user: props?.user,\n    }) || [];\n\n  const ErrorFallback = (errorProps: { error: any }) =>\n    typeof Fallback === \"function\" ? (\n      <Fallback {...props} {...errorProps} />\n    ) : (\n      Fallback\n    );\n\n  return isError ? (\n    <ErrorFallback\n      error={\n        error instanceof Error\n          ? error\n          : makeError(\n              \"UnknownError\",\n              typeof error === \"string\"\n                ? error\n                : `An error occurred in a microfrontend: ${error}`,\n              error\n            )\n      }\n    />\n  ) : isLoading ? (\n    typeof Loading === \"function\" ? (\n      <Loading />\n    ) : (\n      Loading\n    )\n  ) : !targetMF && manifests?.length ? (\n    <ErrorFallback\n      error={makeError(\n        \"NoRouteMatchFound\",\n        `No microfrontend was found capable of handling the route: ${url}`\n      )}\n    />\n  ) : targetMF ? (\n    <Microfrontend\n      {...props}\n      url={url}\n      entry={targetMF.entry}\n      scope={targetMF.scope}\n      module={targetMF.module}\n      manifests={manifests}\n      navigate={navigate}\n      Loading={Loading}\n      Fallback={Fallback}\n    />\n  ) : null;\n};\n\nMicrofrontendScreen.defaultProps = {\n  Microfrontend,\n};\n\nexport * from \"./MicrofrontendScreen.utils\";\n","import {\n  assert,\n  canMatchHost,\n  canMatchPermissions,\n  canMatchRoute,\n  selectProps,\n} from \"../../common\";\nimport {\n  MicrofrontendManifest,\n  MicrofrontendPermission,\n  MicrofrontendRouteOptions,\n} from \"../Microfrontend/Microfrontend.types\";\n\ntype MicrofrontendMatchingRoute = {\n  entry: string;\n  scope: string;\n  module: string;\n  route: string;\n  host?: string;\n};\n\n/**\n *\n * @param manifests\n * @param url\n * @param options\n * @param options.transformPermission Use this to replace keywords in permissions such as :companyAccountId or :userId\n * @returns slots matching the current location url\n */\nexport const getMicrofrontendsMatchingLocation = (\n  manifests: MicrofrontendManifest[],\n  url: string,\n  options: {\n    host?: string;\n    user?: { permissions: MicrofrontendPermission[] };\n    transformPermission?: (\n      permission: MicrofrontendPermission\n    ) => MicrofrontendPermission;\n  }\n): MicrofrontendMatchingRoute[] =>\n  manifests\n    ?.reduce(\n      (arr, manifest) =>\n        [\n          ...arr,\n          ...(manifest.slots.routes?.map((route) => ({\n            ...selectProps([\"entry\", \"scope\", \"module\", \"auth\"])(manifest),\n            ...(typeof route === \"string\" ? { route } : route),\n          })) || []),\n        ] as MicrofrontendMatchingRoute[],\n      [] as MicrofrontendMatchingRoute[]\n    )\n    .filter(\n      ({ route, host: routeHost }: MicrofrontendRouteOptions) =>\n        canMatchRoute(route, url) && canMatchHost(routeHost, options?.host)\n    )\n    .filter(\n      ({ auth }: MicrofrontendRouteOptions) =>\n        !auth?.required ||\n        canMatchPermissions(\n          assert(options?.user, \"options.user must exist\"),\n          auth?.permissions?.map(\n            typeof options?.transformPermission === \"function\"\n              ? options?.transformPermission\n              : (p) => p\n          ) || []\n        )\n    );\n"],"names":["src_exports","__export","ErrorBoundary","Microfrontend","MicrofrontendContext","MicrofrontendScreen","MicrofrontendSlot","assert","canMatchHost","canMatchPermission","canMatchPermissions","canMatchRoute","getMicrofrontendsByName","getMicrofrontendsMatchingLocation","makeError","register","selectProps","sleep","throwError","module","exports","prefix","condition","message","Error","invariant","concat","name","cause","stack","toString","ms","Promise","resolve","setTimeout","import_path_to_regexp","require","route1","route2","route1Regex","pathToRegexp","replace","route2Regex","test","permission1","permission2","hostA","hostB","user","permissions","every","permission","_permission$split","split","_permission$split2","_toArray","action","objectPath","slice","join","some","p","_p$split","_p$split2","uAction","uObjectPath","keys","obj","Object","fromEntries","entries","filter","_ref","key","_slicedToArray","includes","getWindow","window","scope","module2","_ref3","mount","unmount","$ctrl","console","warn","instances","$window","$mfs","$scope","getMicrofrontendController","tracker","increment","decrement","hasZeroInstances","_$window$$mfs","values","reduce","sum","scope2","instanceTracker","runUnmountFn","unmount2","_$ctrl$tracker","_$ctrl$tracker2","mfName","toLocaleLowerCase","mfScript","document","getElementById","src","getAttribute","lastSlash","lastIndexOf","urlStart","maxAttempts","then","attemptToRemoveAssets","_attemptToRemoveAssets","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","attempt","scripts","links","_args","wrap","_context","prev","next","length","undefined","Array","from","querySelectorAll","script","_script$getAttribute","startsWith","link","_link$getAttribute","log","_toConsumableArray","forEach","remove","abrupt","stop","unloadMicrofrontendAssets","containerRef","props","_$ctrl$tracker3","ref","container","HTMLElement","eventBus","emit","import_react","__toESM","_import_react$Compone","_inherits","_ErrorBoundary2","_super","_createSuper","_this","_classCallCheck","call","state","error","errorInfo","_createClass","value","this","setState","Fallback","default","createElement","children","Component","import_dedupe","import_react2","import_react_query","loadComponent","_callee2","factory","Module","_context2","__webpack_init_sharing__","init","__webpack_share_scopes__","race","get","reject","sent","loadScript","id","querySelector","script2","type","async","onload","onerror","head","appendChild","loadMicrofrontend","_ref6","_callee3","_ref5","entry","_context3","toLowerCase","exported","_ref7","catch","_x","_ref8","Loading","className","loadMicrofrontend2","_objectWithoutProperties","_excluded","_ref9","useQuery","_callee4","_context4","isMounted","isFetched","isError","_ref9$data","data","mfClassName","containerId","_ref11","useState","_ref12","mfError","setMFError","_ref13","_ref14","retryCount","setRetryCount","ErrorFallback","errorProps","_objectSpread","retry","_ErrorBoundary","_ref15","useEffect","error2","err","defaultProps","import_react4","import_react3","defaults","homedir","url","navigate","manifests","fetch","input","layout","navItems","logout","_ref16","Fragment","createContext","options","arr","manifest","_manifest$slots$name","slots","map","slot","_ref17","routeHost","host","_ref18","_auth$permissions","auth","required","transformPermission","_ref19","transform","_excluded2","useId","_ref20","useContext","contextProps","_excluded3","transformedSlots","index","import_react5","import_react_query2","import_react_router_dom","_manifest$slots$route","routes","route","_ref21","_ref22","_auth$permissions2","_ref23","Microfrontend2","_excluded4","useLocation","pathname","_ref24","getMicrofrontendManifests","enabled","_ref24$data","isLoading","_ref25","targetMF"],"sourceRoot":""}